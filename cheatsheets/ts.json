{
    "title": "Schema cheat sheet",
    "language": "ts",
    "elements": [
        {
            "name": "variables",
            "tag": "",
            "ast": "",
            "category": "",
            "items": [
                {
                    "title": "Boolean, Number, String",
                    "ittfWrapped": "module \\n    let isDone\\n        :boolean \\n        := false\\n    let decimal\\n        :number \\n        := 6\\n    let hex\\n        :number \\n        := 61453\\n    let binary\\n        :number \\n        := 10\\n    let octal\\n        :number \\n        := 484\\n    let color\\n        :string \\n        := \\\"blue\\\"\\n    set color = 'red'\\n    let fullName\\n        :string \\n        `lit \\n            + Bob Bobbington\\n    let age\\n        :number \\n        := 37\\n    let sentence\\n        :string \\n        `lit \\n            + Hello, my name is\\n            @ fullName\\n            + \\n    let sentence\\n        :string \\n        set \\\"Hello, my name is \\\" + fullName + \\\".\\n\\n\\\" + \\\"I'll be \\\" + (age + 1) + \\\" years old next month.\\\"",
                    "generated": "\\nlet isDoneboolean =  false;\\nlet decimalnumber =  6;\\nlet hexnumber =  61453;\\nlet binarynumber =  10;\\nlet octalnumber =  484;\\nlet colorstring =  \\\"blue\\\";\\ncolor = 'red';\\nlet fullNamestring = `Bob Bobbington`;\\nlet agenumber =  37;\\nlet sentencestring = `Hello, my name is${fullName}`;\\nlet sentencestring = \\\"Hello, my name is \\\" + fullName + \\\".\\n\\n\\\" + \\\"I'll be \\\" + (age + 1) + \\\" years old next month.\\\";\\n"
                },
                {
                    "title": "Array, Tuple",
                    "ittfWrapped": "module \\n    let list\\n        :[ \\n            :number \\n        [ \\n            @ 1\\n            @ 2\\n            @ 3\\n    let Array\\n        :number \\n        [ \\n            @ 1\\n            @ 2\\n            @ 3\\n    let x\\n        :tuple \\n            :string \\n            :number \\n    set x =\\n        [ \\n            @ \\\"hello\\\"\\n            @ 10\\n    set x =\\n        [ \\n            @ 10\\n            @ \\\"hello\\\"",
                    "generated": "\\nlet listnumber[] = [\\n    1, \\n    2, \\n    3\\n];\\nlet Arraynumber = [\\n    1, \\n    2, \\n    3\\n];\\nlet x = string | number;\\nx = [\\n    \\\"hello\\\", \\n    10\\n];\\nx = [\\n    10, \\n    \\\"hello\\\"\\n];\\n"
                },
                {
                    "title": "Enum",
                    "ittfWrapped": "module \\n    :enum Color\\n        @ Red\\n        @ Green\\n        @ Blue\\n    let c\\n        :ref Color\\n        := Color.Green\\n    :enum Color\\n        @ Red 1\\n        @ Green\\n        @ Blue\\n    let c\\n        :ref Color\\n        := Color.Green\\n    :enum Color\\n        @ Red 1\\n        @ Green 2\\n        @ Blue 4\\n    let c\\n        :ref Color\\n        := Color.Green\\n    :enum Color\\n        @ Red 1\\n        @ Green\\n        @ Blue\\n    let colorName\\n        :string \\n        := Color[2]",
                    "generated": "\\n, , let cColor =  Color.Green;\\n, , let cColor =  Color.Green;\\n, , let cColor =  Color.Green;\\n, , let colorNamestring =  Color[2];\\n"
                },
                {
                    "title": "Any, Void, Null, Undefined",
                    "ittfWrapped": "module \\n    let notSure\\n        :any \\n        := 4\\n    set notSure = \\\"maybe a string instead\\\"\\n    set notSure = false\\n    let notSure\\n        :any \\n        := 4\\n    _ notSure.ifItExists\\n    _ notSure.toFixed\\n    let prettySure\\n        :ref Object\\n        := 4\\n    _ prettySure.toFixed\\n    let list\\n        :[ \\n            :any \\n        [ \\n            @ 1\\n            @ true\\n            @ \\\"free\\\"\\n    set list[1] = 100\\n    function warnUser\\n        :return \\n            :void \\n        _ console.log(\\\"This is my warning message\\\")\\n    let unusable\\n        :void \\n        := undefined\\n    let u\\n        :void \\n        := undefined\\n    let n\\n        :null \\n        := null",
                    "generated": "\\nlet notSureany =  4;\\nnotSure = \\\"maybe a string instead\\\";\\nnotSure = false;\\nlet notSureany =  4;\\nnotSure.ifItExists();\\nnotSure.toFixed();\\nlet prettySureObject =  4;\\nprettySure.toFixed();\\nlet listany[] = [\\n    1, \\n    true, \\n    \\\"free\\\"\\n];\\nlist[1] = 100;\\nfunction warnUser():  void {\\n    console.log(\\\"This is my warning message\\\");\\n}\\nlet unusablevoid =  undefined;\\nlet uvoid =  undefined;\\nlet nnull =  null;\\n"
                },
                {
                    "title": "Never",
                    "ittfWrapped": "module \\n    function error\\n        param message\\n            :string \\n        :return \\n            :never \\n        throw new Error(message)\\n    function fail\\n        return error(\\\"Something failed\\\")\\n    function infiniteLoop\\n        :return \\n            :never \\n        while true",
                    "generated": "\\nfunction error(message: string):  never {\\n    throw new Error(message);\\n}\\nfunction fail() {\\n    return error(\\\"Something failed\\\");\\n}\\nfunction infiniteLoop():  never {\\n    while (true) {\\n    }\\n}\\n"
                },
                {
                    "title": "Object",
                    "ittfWrapped": "module \\n    :function create\\n        param o\\n            :union \\n                :object \\n                :null \\n        :return \\n            :void \\n    let strLength\\n        :number \\n        :as \\n            ( \\n                :string \\n                ident someValue\\n            . length",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :function, wzElement: undefined, wzName:, row:2, col:5, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:926:23)\\n    at loadModelFromMTree (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:70:29)\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:188:21\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\index.js:82:25\\n    at finalize (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\evaluator.js:106:5)\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\evaluator.js:91:13\\n    at execute_run_cb (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\jswizzi\\\\jsWizziRunner.js:1246:13)\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\jswizzi\\\\jsWizziRunner.js:1223:24\\n    at Object.getParsed (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\jswizzi\\\\jsWizziRunner.js:1184:20)\\\"\\n}"
                }
            ]
        },
        {
            "name": "function",
            "tag": "function",
            "ast": "",
            "category": "",
            "items": [
                {
                    "title": "Typed functions",
                    "ittfWrapped": "module \\n    function add\\n        param x\\n            :number \\n        param y\\n            :number \\n        :return \\n            :number \\n        return x + y\\n    let myAdd\\n        function \\n            param x\\n                :number \\n            param y\\n                :number \\n            :return \\n                :number \\n            return x + y",
                    "generated": "\\nfunction add(x: number, y: number):  number {\\n    return x + y;\\n}\\nlet myAdd = function(x: number, y: number):  number {\\n    return x + y;\\n};\\n"
                },
                {
                    "title": "Typed functions",
                    "ittfWrapped": "module \\n    let myAdd\\n        :=> \\n            :number \\n            param x\\n                :number \\n            param y\\n                :number \\n        function \\n            param x\\n                :number \\n            param y\\n                :number \\n            :return \\n                :number \\n            return x + y",
                    "generated": "\\nlet myAdd(x: number, y: number) =&gt; number = function(x: number, y: number):  number {\\n    return x + y;\\n};\\n"
                },
                {
                    "title": "Optional parameters",
                    "ittfWrapped": "module \\n    function buildName\\n        param firstName\\n            :string \\n        param \\n            :string \\n            :optional \\n        if lastName\\n            return firstName + \\\" \\\" + lastName\\n        else \\n            return firstName",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :optional, wzElement: undefined, wzName:, row:7, col:13, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at param.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2430:23)\\n    at xfunction.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at xfunction.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2498:29)\\n    at xfunction.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2516:27)\\n    at module.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at module.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:788:29)\\n    at module.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:914:48)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:924:27)\\n    at loadModelFromMTree (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:70:29)\\\"\\n}"
                },
                {
                    "title": "Rest parameters",
                    "ittfWrapped": "module \\n    function buildName\\n        param firstName\\n            :string \\n        param ...restOfName\\n            :[ \\n                :string \\n        return firstName + \\\" \\\" + restOfName.join(\\\" \\\")\\n    function buildName\\n        param firstName\\n            :string \\n        param ...restOfName\\n            :[ \\n                :string \\n        return firstName + \\\" \\\" + restOfName.join(\\\" \\\")\\n    let buildNameFun\\n        :=> \\n            :string \\n            param fname\\n                :string \\n            param ...rest\\n                :[ \\n                    :string \\n        := buildName",
                    "generated": "\\nfunction buildName(firstName: string, ...restOfName: string[]) {\\n    return firstName + \\\" \\\" + restOfName.join(\\\" \\\");\\n}\\nfunction buildName(firstName: string, ...restOfName: string[]) {\\n    return firstName + \\\" \\\" + restOfName.join(\\\" \\\");\\n}\\nlet buildNameFun(fname: string, ...rest: string[]) =&gt; string =  buildName;\\n"
                },
                {
                    "title": "This and arrow functions",
                    "ittfWrapped": "module \\n    let deck\\n        { \\n            [ suits\\n                @ \\\"hearts\\\"\\n                @ \\\"spades\\\"\\n                @ \\\"clubs\\\"\\n                @ \\\"diamonds\\\"\\n            @ cards Array(52)\\n            @ createCardPicker\\n                function \\n                    return \\n                        function \\n                            let pickedCard = Math.floor(Math.random() * 52)\\n                            let pickedSuit = Math.floor(pickedCard / 13)\\n                            return \\n                                { \\n                                    @ suit this.suits[pickedSuit]\\n                                    @ card pickedCard % 13\\n    let deck\\n        { \\n            [ suits\\n                @ \\\"hearts\\\"\\n                @ \\\"spades\\\"\\n                @ \\\"clubs\\\"\\n                @ \\\"diamonds\\\"\\n            @ cards Array(52)\\n            @ createCardPicker\\n                function \\n                    # NOTE: the line below is now an arrow function, allowing us to capture 'this' right here\\n                    return \\n                        => \\n                            let pickedCard = Math.floor(Math.random() * 52)\\n                            let pickedSuit = Math.floor(pickedCard / 13)\\n                            return \\n                                { \\n                                    @ suit this.suits[pickedSuit]\\n                                    @ card pickedCard % 13",
                    "generated": "\\nlet deck = {\\n    suits: [\\n        \\\"hearts\\\", \\n        \\\"spades\\\", \\n        \\\"clubs\\\", \\n        \\\"diamonds\\\"\\n    ], \\n    cards: Array(52), \\n    createCardPicker: function() {\\n        return function() {\\n                let pickedCard = Math.floor(Math.random() * 52);\\n                let pickedSuit = Math.floor(pickedCard / 13);\\n                return {\\n                        suit: this.suits[pickedSuit], \\n                        card: pickedCard % 13\\n                    };\\n            };\\n    }\\n};\\nlet deck = {\\n    suits: [\\n        \\\"hearts\\\", \\n        \\\"spades\\\", \\n        \\\"clubs\\\", \\n        \\\"diamonds\\\"\\n    ], \\n    cards: Array(52), \\n    createCardPicker: function() {\\n        // NOTE: the line below is now an arrow function, allowing us to capture 'this' right here\\n        return () =&gt; {\\n                let pickedCard = Math.floor(Math.random() * 52);\\n                let pickedSuit = Math.floor(pickedCard / 13);\\n                return {\\n                        suit: this.suits[pickedSuit], \\n                        card: pickedCard % 13\\n                    };\\n            };\\n    }\\n};\\n"
                },
                {
                    "title": "This parameters in callbacks",
                    "ittfWrapped": "module \\n    :interface UIElement\\n        :m addClickListener\\n            :void \\n            param onclick\\n                :=> \\n                    :void \\n                    param this\\n                        :void \\n                    param e\\n                        :ref Event\\n    class Handler\\n        p info\\n            :string \\n        m onClickBad\\n            param this\\n                :ref Handler\\n            param e\\n                :ref Event\\n            set this.info = e.message",
                    "generated": "\\ninterface UIElement {\\n    addClickListener(onclick)void;\\n}\\nclass Handler {\\n    info: string;\\n    onClickBad\\n    (this: Handler, e: Event) {\\n        this.info = e.message;\\n    }\\n}\\n"
                },
                {
                    "title": "Overloads 1",
                    "ittfWrapped": "module \\n    let suits\\n        [ \\n            @ \\\"hearts\\\"\\n            @ \\\"spades\\\"\\n            @ \\\"clubs\\\"\\n            @ \\\"diamonds\\\"\\n    function pickCard\\n        param x\\n        :return \\n            :any \\n        if typeof x == \\\"object\\\"\\n            let pickedCard = Math.floor(Math.random() * x.length)\\n            return pickedCard\\n        else \\n            # Otherwise just let them pick the card\\n            if typeof x == \\\"number\\\"\\n                let pickedSuit = Math.floor(x / 13)\\n                return \\n                    { \\n                        @ suit suits[pickedSuit]\\n                        @ card x % 13",
                    "generated": "\\nlet suits = [\\n    \\\"hearts\\\", \\n    \\\"spades\\\", \\n    \\\"clubs\\\", \\n    \\\"diamonds\\\"\\n];\\nfunction pickCard(x):  any {\\n    if (typeof x == \\\"object\\\") {\\n        let pickedCard = Math.floor(Math.random() * x.length);\\n        return pickedCard;\\n    }\\n    else {\\n        // Otherwise just let them pick the card\\n        if (typeof x == \\\"number\\\") {\\n            let pickedSuit = Math.floor(x / 13);\\n            return {\\n                    suit: suits[pickedSuit], \\n                    card: x % 13\\n                };\\n        }\\n    }\\n}\\n"
                },
                {
                    "title": "Overloads 2",
                    "ittfWrapped": "module \\n    let suits\\n        [ \\n            @ \\\"hearts\\\"\\n            @ \\\"spades\\\"\\n            @ \\\"clubs\\\"\\n            @ \\\"diamonds\\\"\\n    :function pickCard\\n        param x\\n            :[ \\n                :{ \\n                    :p suit\\n                        :string \\n                    :p card\\n                        :number \\n        :return \\n            :number \\n    :function pickCard\\n        param x\\n            :number \\n        :return \\n            :{ \\n                :p suit\\n                    :string \\n                :p card\\n                    :number \\n    function pickCard\\n        param x\\n        :return \\n            :any \\n        # if so, they gave us the deck and we'll pick the card\\n        if typeof x == \\\"object\\\"\\n            let pickedCard = Math.floor(Math.random() * x.length)\\n            return pickedCard\\n        else \\n            # Otherwise just let them pick the card\\n            if typeof x == \\\"number\\\"\\n                let pickedSuit = Math.floor(x / 13)\\n                return \\n                    { \\n                        @ suit suits[pickedSuit]\\n                        @ card x % 13",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :function, wzElement: undefined, wzName:, row:8, col:5, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:926:23)\\n    at loadModelFromMTree (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:70:29)\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:188:21\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\index.js:82:25\\n    at finalize (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\evaluator.js:106:5)\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\evaluator.js:91:13\\n    at execute_run_cb (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\jswizzi\\\\jsWizziRunner.js:1246:13)\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\jswizzi\\\\jsWizziRunner.js:1223:24\\n    at Object.getParsed (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\jswizzi\\\\jsWizziRunner.js:1184:20)\\\"\\n}"
                }
            ]
        },
        {
            "name": "class",
            "tag": "class",
            "ast": "",
            "category": "",
            "items": [
                {
                    "title": "Simple class",
                    "ittfWrapped": "module \\n    class Greeter\\n        p greeting\\n            :string \\n        ctor \\n            param message\\n                :string \\n            set this.greeting = message\\n        m greet\\n            return \\\"Hello, \\\" + this.greeting\\n    let greeter = new Greeter(\\\"world\\\")",
                    "generated": "\\nclass Greeter {\\n    constructor(message: string) {this.greeting = message;\\n    }\\n    greeting: string;\\n    greet\\n    () {\\n        return \\\"Hello, \\\" + this.greeting;\\n    }\\n}\\nlet greeter = new Greeter(\\\"world\\\");\\n"
                },
                {
                    "title": "Class extension",
                    "ittfWrapped": "module \\n    class Animal\\n        m move\\n            param distanceInMeters\\n                :number \\n                := 0\\n            _ console.log\\n                `lit \\n                    + Animal moved\\n                    @ distanceInMeters\\n                    + m.\\n    class Dog\\n        super Animal\\n        m bark\\n            _ console.log('Woof! Woof!')",
                    "generated": "\\nclass Animal {\\n    move\\n    (distanceInMeters: number) {\\n        console.log(`Animal moved${distanceInMeters}m.`);\\n    }\\n}\\nclass Dog extends Animal\\n {\\n    constructor() {super();\\n    }\\n    bark\\n    () {\\n        console.log('Woof! Woof!');\\n    }\\n}\\n"
                },
                {
                    "title": "Complex class example",
                    "ittfWrapped": "module \\n    class Animal\\n        p name\\n            :string \\n        ctor \\n            param theName\\n                :string \\n            set this.name = theName\\n        m move\\n            param distanceInMeters\\n                :number \\n                := 0\\n            _ console.log\\n                `lit \\n                    + \\n                    @ this.name\\n                    + moved\\n                    @ distanceInMeters\\n                    + m.\\n    class Snake\\n        super Animal\\n        ctor \\n            param name\\n                :string \\n            _ super(name)\\n        m move\\n            param distanceInMeters = 5\\n            _ console.log(\\\"Slithering...\\\")\\n            _ super.move(distanceInMeters)\\n    class Horse\\n        super Animal\\n        ctor \\n            param name\\n                :string \\n            _ super(name)\\n        m move\\n            param distanceInMeters = 45\\n            _ console.log(\\\"Galloping...\\\")\\n            _ super.move(distanceInMeters)",
                    "generated": "\\nclass Animal {\\n    constructor(theName: string) {this.name = theName;\\n    }\\n    name: string;\\n    move\\n    (distanceInMeters: number) {\\n        console.log(`${this.name}moved${distanceInMeters}m.`);\\n    }\\n}\\nclass Snake extends Animal\\n {\\n    constructor(name: string) {super();\\n        super(name);\\n    }\\n    move\\n    (distanceInMeters = 5) {\\n        console.log(\\\"Slithering...\\\");\\n        super.move(distanceInMeters);\\n    }\\n}\\nclass Horse extends Animal\\n {\\n    constructor(name: string) {super();\\n        super(name);\\n    }\\n    move\\n    (distanceInMeters = 45) {\\n        console.log(\\\"Galloping...\\\");\\n        super.move(distanceInMeters);\\n    }\\n}\\n"
                },
                {
                    "title": "Class accessors",
                    "ittfWrapped": "module \\n    class Animal\\n        p name\\n            :private \\n            :string \\n        ctor \\n            param theName\\n                :string \\n            set this.name = theName\\n    class Rhino\\n        super Animal\\n        ctor \\n            _ super(\\\"Rhino\\\")\\n    class Person\\n        p name\\n            :protected \\n            :string \\n        ctor \\n            param name\\n                :string \\n            set this.name = name\\n    class Employee\\n        super Person\\n        p department\\n            :private \\n            :string \\n        ctor \\n            param name\\n                :string \\n            param department\\n                :string \\n            _ super(name)\\n            set this.department = department\\n        m getElevatorPitch\\n            :public \\n            return \\n                `lit \\n                    + Hello, my name is\\n                    @ this.name\\n                    + and I work in\\n                    @ this.department\\n                    + .\\n    class Person\\n        p name\\n            :protected \\n            :string \\n        ctor \\n            :protected \\n            param theName\\n                :string \\n            set this.name = theName\\n    class Employee\\n        super Person\\n        p department\\n            :private \\n            :string \\n        ctor \\n            param name\\n                :string \\n            param department\\n                :string \\n            _ super(name)\\n            set this.department = department\\n        m getElevatorPitch\\n            :public \\n            return \\n                `lit \\n                    + Hello, my name is\\n                    @ this.name\\n                    + and I work in\\n                    @ this.department\\n                    + .",
                    "generated": "\\nclass Animal {\\n    constructor(theName: string) {this.name = theName;\\n    }\\n    name: string;\\n}\\nclass Rhino extends Animal\\n {\\n    constructor() {super();\\n        super(\\\"Rhino\\\");\\n    }\\n}\\nclass Person {\\n    constructor(name: string) {this.name = name;\\n    }\\n    name: string;\\n}\\nclass Employee extends Person\\n {\\n    constructor(name: string, department: string) {super();\\n        super(name);\\n        this.department = department;\\n    }\\n    department: string;\\n    getElevatorPitch\\n    () {\\n        return `Hello, my name is${this.name}and I work in${this.department}.`;\\n    }\\n}\\nclass Person {\\n    constructor(theName: string) {this.name = theName;\\n    }\\n    name: string;\\n}\\nclass Employee extends Person\\n {\\n    constructor(name: string, department: string) {super();\\n        super(name);\\n        this.department = department;\\n    }\\n    department: string;\\n    getElevatorPitch\\n    () {\\n        return `Hello, my name is${this.name}and I work in${this.department}.`;\\n    }\\n}\\n"
                },
                {
                    "title": "Readonly modifier",
                    "ittfWrapped": "module \\n    class Octopus\\n        p name\\n            :readonly \\n            :string \\n        p numberOfLegs\\n            :readonly \\n            :number \\n            := 8\\n        ctor \\n            param theName\\n                :string \\n            set this.name = theName\\n    class Octopus\\n        p numberOfLegs\\n            :readonly \\n            :number \\n            := 8\\n        ctor \\n            param \\n                :readonly \\n                :string ",
                    "generated": "\\nclass Octopus {\\n    constructor(theName: string) {this.name = theName;\\n    }\\n    name: string;\\n    numberOfLegs: number}\\nclass Octopus {\\n    constructor(: string) {}\\n    numberOfLegs: number}\\n"
                },
                {
                    "title": "Static members",
                    "ittfWrapped": "module \\n    class Grid\\n        p origin\\n            static \\n            { \\n                @ x 0\\n                @ y 0\\n        m calculateDistanceFromOrigin\\n            param point\\n                :{ \\n                    :p x\\n                        :number \\n                    :p y\\n                        :number \\n            let xDist = (point.x - Grid.origin.x)\\n            let yDist = (point.y - Grid.origin.y)\\n            return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale",
                    "generated": "\\nclass Grid {\\n    static origincalculateDistanceFromOrigin\\n    (point: {}) {\\n        let xDist = (point.x - Grid.origin.x);\\n        let yDist = (point.y - Grid.origin.y);\\n        return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;\\n    }\\n}\\n"
                },
                {
                    "title": "Abstract classes",
                    "ittfWrapped": "module \\n    class Animal\\n        :abstract \\n        :m makeSound\\n            :abstract \\n            :return \\n                :void \\n        m move\\n            _ console.log(\\\"roaming the earth...\\\")\\n    class Department\\n        :abstract \\n        ctor \\n            param name\\n                :string \\n        m printName\\n            _ console.log(\\\"Department name: \\\" + this.name)\\n        :m printMeeting\\n            :abstract \\n            :return \\n                :void \\n    class AccountingDepartment\\n        super Department\\n        ctor \\n            _ super(\\\"Accounting and Auditing\\\")\\n        m printMeeting\\n            _ console.log(\\\"The Accounting Department meets each Monday at 10am.\\\")\\n        m generateReports\\n            _ console.log(\\\"Generating accounting reports...\\\")",
                    "generated": "\\nclass Animal {\\n    makeSoundmove\\n    () {\\n        console.log(\\\"roaming the earth...\\\");\\n    }\\n}\\nclass Department {\\n    constructor(name: string) {}\\n    printName\\n    () {\\n        console.log(\\\"Department name: \\\" + this.name);\\n    }\\n    printMeeting}\\nclass AccountingDepartment extends Department\\n {\\n    constructor() {super();\\n        super(\\\"Accounting and Auditing\\\");\\n    }\\n    printMeeting\\n    () {\\n        console.log(\\\"The Accounting Department meets each Monday at 10am.\\\");\\n    }\\n    generateReports\\n    () {\\n        console.log(\\\"Generating accounting reports...\\\");\\n    }\\n}\\n"
                },
                {
                    "title": "Static members",
                    "ittfWrapped": "module \\n    class Greeter\\n        p standardGreeting\\n            static \\n            := \\\"Hello, there\\\"\\n        p greeting\\n            :string \\n        m greet\\n            if this.greeting\\n                return \\\"Hello, \\\" + this.greeting\\n            else \\n                return Greeter.standardGreeting",
                    "generated": "\\nclass Greeter {\\n    static standardGreetinggreeting: string;\\n    greet\\n    () {\\n        if (this.greeting) {\\n            return \\\"Hello, \\\" + this.greeting;\\n        }\\n        else {\\n            return Greeter.standardGreeting;\\n        }\\n    }\\n}\\n"
                },
                {
                    "title": "Class extended by interface",
                    "ittfWrapped": "module \\n    class Point\\n        p x\\n            :number \\n        p y\\n            :number \\n    :interface Point3d\\n        :extends Point\\n        :p z\\n            :number \\n    let point3d\\n        :ref Point3d\\n        { \\n            @ x 1\\n            @ y 2\\n            @ z 3",
                    "generated": "\\nclass Point {\\n    x: number;\\n    y: number;\\n}\\ninterface Point3d {\\n    znumber;\\n}\\nlet point3dPoint3d = {\\n    x: 1, \\n    y: 2, \\n    z: 3\\n};\\n"
                }
            ]
        },
        {
            "name": "interfaces",
            "tag": "",
            "ast": "",
            "category": "",
            "items": [
                {
                    "title": "Simple interface",
                    "ittfWrapped": "module \\n    :interface LabelledValue\\n        :p label\\n            :string \\n    function printLabel\\n        param labelledObj\\n            :ref LabelledValue\\n        _ console.log(labelledObj.label)",
                    "generated": "\\ninterface LabelledValue {\\n    labelstring;\\n}\\nfunction printLabel(labelledObj: LabelledValue) {\\n    console.log(labelledObj.label);\\n}\\n"
                },
                {
                    "title": "Optional properties",
                    "ittfWrapped": "module \\n    :interface SquareConfig\\n        :p color\\n            :optional \\n            :string \\n        :p width\\n            :optional \\n            :number \\n    function createSquare\\n        param config\\n            :ref SquareConfig\\n        :return \\n            :{ \\n                :p color\\n                    :string \\n                :p area\\n                    :number \\n        let newSquare\\n            { \\n                @ color \\\"white\\\"\\n                @ area 100\\n        if config.color\\n            set newSquare.color = config.color\\n        if config.width\\n            set newSquare.area = config.width * config.width\\n        return newSquare\\n    let mySquare\\n        _ createSquare\\n            { \\n                @ color \\\"black\\\"",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :optional, wzElement: undefined, wzName:, row:4, col:13, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at typeProperty.statement.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:840:23)\\n    at typeInterface.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at typeInterface.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:253:29)\\n    at typeInterface.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2852:48)\\n    at typeInterface.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2862:27)\\n    at module.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at module.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:803:29)\\n    at module.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:914:48)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:924:27)\\\"\\n}"
                },
                {
                    "title": "Optional properties 2",
                    "ittfWrapped": "module \\n    :interface SquareConfig\\n        :p color\\n            :optional \\n            :string \\n        :p width\\n            :optional \\n            :number \\n    function createSquare\\n        param config\\n            :ref SquareConfig\\n        :return \\n            :{ \\n                :p color\\n                    :string \\n                :p area\\n                    :number \\n        let newSquare\\n            { \\n                @ color \\\"white\\\"\\n                @ area 100\\n        if config.clor\\n            # Error: Property 'clor' does not exist on type 'SquareConfig'\\n            set newSquare.color = config.clor\\n        if config.width\\n            set newSquare.area = config.width * config.width\\n        return newSquare\\n    let mySquare\\n        _ createSquare\\n            { \\n                @ color \\\"black\\\"",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :optional, wzElement: undefined, wzName:, row:4, col:13, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at typeProperty.statement.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:840:23)\\n    at typeInterface.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at typeInterface.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:253:29)\\n    at typeInterface.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2852:48)\\n    at typeInterface.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2862:27)\\n    at module.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at module.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:803:29)\\n    at module.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:914:48)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:924:27)\\\"\\n}"
                },
                {
                    "title": "Readonly properties",
                    "ittfWrapped": "module \\n    :interface Point\\n        :p x\\n            :number \\n        :p y\\n            :number \\n    let p1\\n        :ref Point\\n        { \\n            @ x 10\\n            @ y 20\\n    set p1.x = 5\\n    let a\\n        :[ \\n            :number \\n        [ \\n            @ 1\\n            @ 2\\n            @ 3\\n            @ 4\\n    let ReadonlyArray\\n        :number \\n        := a\\n    set ro[0] = 12\\n    _ ro.push(5)\\n    set ro.length = 100\\n    set a = ro\\n    set a =\\n        :as \\n            :[ \\n                :number \\n            ident ro",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :as, wzElement: undefined, wzName:, row:29, col:9, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at set.statement.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:840:23)\\n    at module.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at module.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:428:29)\\n    at module.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:914:48)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:924:27)\\n    at loadModelFromMTree (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:70:29)\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:188:21\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\index.js:82:25\\n    at finalize (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\evaluator.js:106:5)\\\"\\n}"
                },
                {
                    "title": "Readonly vs const",
                    "ittfWrapped": "module \\n    :interface SquareConfig\\n        :p color\\n            :optional \\n            :string \\n        :p width\\n            :optional \\n            :number \\n    function createSquare\\n        param config\\n            :ref SquareConfig\\n        :return \\n            :{ \\n                :p color\\n                    :string \\n                :p area\\n                    :number \\n    let mySquare\\n        _ createSquare\\n            { \\n                @ colour \\\"red\\\"\\n                @ width 100",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :optional, wzElement: undefined, wzName:, row:4, col:13, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at typeProperty.statement.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:840:23)\\n    at typeInterface.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at typeInterface.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:253:29)\\n    at typeInterface.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2852:48)\\n    at typeInterface.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2862:27)\\n    at module.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at module.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:803:29)\\n    at module.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:914:48)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:924:27)\\\"\\n}"
                },
                {
                    "title": "",
                    "ittfWrapped": "module \\n    let mySquare\\n        _ createSquare\\n            { \\n                @ colour \\\"red\\\"\\n                @ width 100\\n    let mySquare\\n        _ createSquare\\n            :as \\n                :ref SquareConfig\\n                { \\n                    @ width 100\\n                    @ opacity 0.5\\n    :interface SquareConfig\\n        :p color\\n            :optional \\n            :string \\n        :p width\\n            :optional \\n            :number \\n        :index \\n            :any \\n            param propName\\n                :string \\n    let squareOptions\\n        { \\n            @ colour \\\"red\\\"\\n            @ width 100\\n    let mySquare = createSquare(squareOptions)",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :as, wzElement: undefined, wzName:, row:9, col:13, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at call.statement.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:840:23)\\n    at xlet.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at xlet.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:215:29)\\n    at xlet.statement.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:838:27)\\n    at module.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at module.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:369:29)\\n    at module.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:914:48)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:924:27)\\n    at loadModelFromMTree (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:70:29)\\\"\\n}"
                },
                {
                    "title": "Function Types",
                    "ittfWrapped": "module \\n    :interface SearchFunc\\n        :call \\n            :boolean \\n            param source\\n                :string \\n            param subString\\n                :string \\n    let mySearch\\n        :ref SearchFunc\\n    set mySearch =\\n        function \\n            param source\\n                :string \\n            param subString\\n                :string \\n            let result = source.search(subString)\\n            return result > -1\\n    let mySearch\\n        :ref SearchFunc\\n    set mySearch =\\n        function \\n            param src\\n                :string \\n            param sub\\n                :string \\n            :return \\n                :boolean \\n            let result = src.search(sub)\\n            return result > -1\\n    let mySearch\\n        :ref SearchFunc\\n    set mySearch =\\n        function \\n            param src\\n            param sub\\n            let result = src.search(sub)\\n            return result > -1",
                    "generated": "\\ninterface SearchFunc {\\n    (source: string, subString: string): boolean\\n}\\nlet mySearchSearchFunc;\\nmySearch = function(source: string, subString: string) {\\n    let result = source.search(subString);\\n    return result &gt; -1;\\n};\\nlet mySearchSearchFunc;\\nmySearch = function(src: string, sub: string):  boolean {\\n    let result = src.search(sub);\\n    return result &gt; -1;\\n};\\nlet mySearchSearchFunc;\\nmySearch = function(src, sub) {\\n    let result = src.search(sub);\\n    return result &gt; -1;\\n};\\n"
                },
                {
                    "title": "Indexable Types",
                    "ittfWrapped": "module \\n    :interface StringArray\\n        :index \\n            :string \\n            param index\\n                :number \\n    let myArray\\n        :ref StringArray\\n    set myArray =\\n        [ \\n            @ \\\"Bob\\\"\\n            @ \\\"Fred\\\"\\n    let myStr\\n        :string \\n        := myArray[0]\\n    class Animal\\n        p name\\n            :string \\n    class Dog\\n        super Animal\\n        p breed\\n            :string \\n    :interface NotOkay\\n        :index \\n            :ref Animal\\n            param x\\n                :number \\n        :index \\n            :ref Dog\\n            param x\\n                :string \\n    :interface NumberDictionary\\n        :index \\n            :number \\n            param index\\n                :string \\n        :p length\\n            :number \\n        :p name\\n            :string \\n    :interface ReadonlyStringArray\\n        :index \\n            :string \\n            param index\\n                :number \\n    let myArray\\n        :ref ReadonlyStringArray\\n        [ \\n            @ \\\"Alice\\\"\\n            @ \\\"Bob\\\"\\n    set myArray[2] = \\\"Mallory\\\"",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziModelLoadError\\\",\\n  \\\"message\\\": \\\"Error: Tag not recognized: :index, wzElement: undefined, wzName:, row:3, col:9, source:c:/basefolder/temp.ts.ittf\\nIn ts Factory, calling loadFromNode.\\nLoading ittf document c:/basefolder/temp.ts.ittf\\\",\\n  \\\"stack\\\": \\\"Error\\n    at new tsModelException (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:4021:23)\\n    at typeInterface.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:2864:23)\\n    at module.tsBase.wzLoadToChildColl (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:97:18)\\n    at module.statement.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:803:29)\\n    at module.loadChild (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:914:48)\\n    at module.loadFromNode (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-model.g.js:924:27)\\n    at loadModelFromMTree (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:70:29)\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\wizzi\\\\models\\\\ts-factory.g.js:188:21\\n    at C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\index.js:82:25\\n    at finalize (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-mtree\\\\lib\\\\loader\\\\evaluator.js:106:5)\\\"\\n}"
                },
                {
                    "title": "Class Types",
                    "ittfWrapped": "module \\n    :interface ClockInterface\\n        :p currentTime\\n            :ref Date\\n    class Clock\\n        :extends ClockInterface\\n        p currentTime\\n            :ref Date\\n        ctor \\n            param h\\n                :number \\n            param m\\n                :number \\n    :interface ClockInterface\\n        :p currentTime\\n            :ref Date\\n        :m setTime\\n            param d\\n                :ref Date\\n    class Clock\\n        :extends ClockInterface\\n        p currentTime\\n            :ref Date\\n        m setTime\\n            param d\\n                :ref Date\\n            set this.currentTime = d\\n        ctor \\n            param h\\n                :number \\n            param m\\n                :number ",
                    "generated": "\\ninterface ClockInterface {\\n    currentTimeDate;\\n}\\nclass Clock {\\n    constructor(h: number, m: number) {}\\n    ClockInterface;\\n    currentTime: Date;\\n}\\ninterface ClockInterface {\\n    currentTimeDate;\\n    setTime(d);\\n}\\nclass Clock {\\n    constructor(h: number, m: number) {}\\n    ClockInterface;\\n    currentTime: Date;\\n    setTime\\n    (d: Date) {\\n        this.currentTime = d;\\n    }\\n}\\n"
                },
                {
                    "title": "static and instance sides of classes",
                    "ittfWrapped": "module \\n    :interface ClockConstructor\\n        :new \\n            param hour\\n                :number \\n            param minute\\n                :number \\n    class Clock\\n        :extends ClockConstructor\\n        p currentTime\\n            :ref Date\\n        ctor \\n            param h\\n                :number \\n            param m\\n                :number \\n    :interface ClockConstructor\\n        :new \\n            :ref ClockInterface\\n            param hour\\n                :number \\n            param minute\\n                :number \\n    :interface ClockInterface\\n        :m tick\\n    function createClock\\n        param ctor\\n            :ref ClockConstructor\\n        param hour\\n            :number \\n        param minute\\n            :number \\n        :return \\n            :ref ClockInterface\\n        return new ctor(hour, minute)\\n    class DigitalClock\\n        :extends ClockInterface\\n        ctor \\n            param h\\n                :number \\n            param m\\n                :number \\n        m tick\\n            _ console.log(\\\"beep beep\\\")\\n    class AnalogClock\\n        :extends ClockInterface\\n        ctor \\n            param h\\n                :number \\n            param m\\n                :number \\n        m tick\\n            _ console.log(\\\"tick tock\\\")\\n    let digital = createClock(DigitalClock, 12, 17)\\n    let analog = createClock(AnalogClock, 7, 32)",
                    "generated": "\\n{\\n  \\\"name\\\": \\\"WizziFactoryError\\\",\\n  \\\"inner\\\": {\\n    \\\"name\\\": \\\"NodeError\\\",\\n    \\\"ittfDocumentUri\\\": \\\"c:/basefolder/temp.ts.ittf\\\",\\n    \\\"row\\\": 3,\\n    \\\"col\\\": 9,\\n    \\\"sourceKey\\\": \\\"f1\\\",\\n    \\\"message\\\": \\\"wizzi.ts.artifacts.module.gen.codegen.statement. Unknown statement tag/element: :new/typeNew at row: 3, col: 9, source: f1, in file: c:/basefolder/temp.ts.ittf\\\",\\n    \\\"stack\\\": \\\"Error\\n    at new NodeError (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-utils\\\\lib\\\\errors.js:53:19)\\n    at GenContext.error (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi\\\\lib\\\\artifact\\\\genContext.js:152:16)\\n    at Object.md.genItem (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:104:23)\\n    at repeater_1 (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:140:12)\\n    at Object.md.genItems (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:150:5)\\n    at cnt.stm.typeInterface (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statements\\\\interface.js:28:13)\\n    at Object.md.genItem (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:100:13)\\n    at Object.md.gen (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:57:8)\\n    at repeater_1 (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\main.js:49:27)\\n    at Object.md.gen (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\main.js:59:9)\\\"\\n  },\\n  \\\"shortmessage\\\": \\\"See inner error\\\",\\n  \\\"message\\\": \\\"See inner error: wizzi.ts.artifacts.module.gen.codegen.statement. Unknown statement tag/element: :new/typeNew at row: 3, col: 9, source: f1, in file: c:/basefolder/temp.ts.ittf\\\",\\n  \\\"info\\\": {\\n    \\\"method\\\": \\\"wizzi.wizziFactory.generateArtifact\\\",\\n    \\\"parameter\\\": {\\n      \\\"artifactName\\\": \\\"ts/module\\\",\\n      \\\"artifactIttfDocumentUri\\\": \\\"c:/basefolder/temp.ts.ittf\\\"\\n    },\\n    \\\"sourcePath\\\": \\\"C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi\\\\lib\\\\services\\\\wizziFactory.js\\\"\\n  },\\n  \\\"stack\\\": [\\n    \\\"    Error\\\",\\n    \\\"        at new NodeError (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-utils\\\\lib\\\\errors.js:53:19)\\\",\\n    \\\"        at GenContext.error (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi\\\\lib\\\\artifact\\\\genContext.js:152:16)\\\",\\n    \\\"        at Object.md.genItem (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:104:23)\\\",\\n    \\\"        at repeater_1 (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:140:12)\\\",\\n    \\\"        at Object.md.genItems (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:150:5)\\\",\\n    \\\"        at cnt.stm.typeInterface (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statements\\\\interface.js:28:13)\\\",\\n    \\\"        at Object.md.genItem (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:100:13)\\\",\\n    \\\"        at Object.md.gen (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\codegen\\\\statement.js:57:8)\\\",\\n    \\\"        at repeater_1 (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\main.js:49:27)\\\",\\n    \\\"        at Object.md.gen (C:\\\\my\\\\wizzi\\\\v5\\\\apps\\\\node_modules\\\\wizzi-js\\\\lib\\\\artifacts\\\\ts\\\\module\\\\gen\\\\main.js:59:9)\\\"\\n  ],\\n  \\\"__is_error\\\": true\\n}"
                },
                {
                    "title": "Extending Interfaces",
                    "ittfWrapped": "module \\n    :interface Shape\\n        :p color\\n            :string \\n    :interface Square\\n        :extends Shape\\n        :p sideLength\\n            :number \\n    set square.color = \\\"blue\\\"\\n    set square.sideLength = 10\\n    :interface Shape\\n        :p color\\n            :string \\n    :interface PenStroke\\n        :p penWidth\\n            :number \\n    :interface Square\\n        :extends Shape\\n        :extends PenStroke\\n        :p sideLength\\n            :number \\n    set square.color = \\\"blue\\\"\\n    set square.sideLength = 10\\n    set square.penWidth = 5",
                    "generated": "\\ninterface Shape {\\n    colorstring;\\n}\\ninterface Square {\\n    sideLengthnumber;\\n}\\nsquare.color = \\\"blue\\\";\\nsquare.sideLength = 10;\\ninterface Shape {\\n    colorstring;\\n}\\ninterface PenStroke {\\n    penWidthnumber;\\n}\\ninterface Square {\\n    sideLengthnumber;\\n}\\nsquare.color = \\\"blue\\\";\\nsquare.sideLength = 10;\\nsquare.penWidth = 5;\\n"
                },
                {
                    "title": "Hybrid Types",
                    "ittfWrapped": "module \\n    :interface Counter\\n        :call \\n            :string \\n            param start\\n                :number \\n        :p interval\\n            :number \\n        :m reset\\n            :void \\n    function getCounter\\n        :return \\n            :ref Counter\\n        set counter.interval = 123\\n        set counter.reset =\\n            function \\n        return counter\\n    let c = getCounter()\\n    _ c(10)\\n    _ c.reset\\n    set c.interval = 5",
                    "generated": "\\ninterface Counter {\\n    (start: number): string\\n    intervalnumber;\\n    reset()void;\\n}\\nfunction getCounter():  Counter {\\n    counter.interval = 123;\\n    counter.reset = function() {\\n    };\\n    return counter;\\n}\\nlet c = getCounter();\\nc(10);\\nc.reset();\\nc.interval = 5;\\n"
                },
                {
                    "title": "Interfaces Extending Classes",
                    "ittfWrapped": "module \\n    class Control\\n        p state\\n            :private \\n            :any \\n    :interface SelectableControl\\n        :extends Control\\n        :m select\\n            :void \\n    class Button\\n        super Control\\n        :extends SelectableControl\\n        m select\\n    class TextBox\\n        super Control\\n        m select\\n    class Image\\n        :extends SelectableControl\\n        m select\\n    class Location",
                    "generated": "\\nclass Control {\\n    state: any;\\n}\\ninterface SelectableControl {\\n    select()void;\\n}\\nclass Button extends Control\\n {\\n    constructor() {super();\\n    }\\n    SelectableControl;\\n    select\\n    () {\\n    }\\n}\\nclass TextBox extends Control\\n {\\n    constructor() {super();\\n    }\\n    select\\n    () {\\n    }\\n}\\nclass Image {\\n    SelectableControl;\\n    select\\n    () {\\n    }\\n}\\nclass Location {\\n}\\n"
                }
            ]
        },
        {
            "name": "generics",
            "tag": "",
            "ast": "",
            "category": "",
            "items": [
                {
                    "title": "Introduction",
                    "ittfWrapped": "module \\n    function identity\\n        param arg\\n            :any \\n        :return \\n            :any \\n        return arg\\n    function identity\\n        :< T\\n        param arg\\n            :ref T\\n        :return \\n            :ref T\\n        return arg",
                    "generated": "\\nfunction identity(arg: any):  any {\\n    return arg;\\n}\\nfunction identity&lt;T&gt;(arg: T):  T {\\n    return arg;\\n}\\n"
                },
                {
                    "title": "Array argument",
                    "ittfWrapped": "module \\n    function loggingIdentity\\n        :< T\\n        param arg\\n            :[ \\n                :ref T\\n        :return \\n            :[ \\n                :ref T\\n        _ console.log(arg.length)\\n        return arg\\n    function loggingIdentity\\n        :< T\\n        param arg\\n            :ref Array\\n                :ref T\\n        :return \\n            :ref Array\\n                :ref T\\n        _ console.log(arg.length)\\n        return arg",
                    "generated": "\\nfunction loggingIdentity&lt;T&gt;(arg: T[]):  T[] {\\n    console.log(arg.length);\\n    return arg;\\n}\\nfunction loggingIdentity&lt;T&gt;(arg: &lt;Array&gt;T):  &lt;Array&gt;T {\\n    console.log(arg.length);\\n    return arg;\\n}\\n"
                },
                {
                    "title": "Generic Types",
                    "ittfWrapped": "module \\n    function identity\\n        :< T\\n        param arg\\n            :ref T\\n        :return \\n            :ref T\\n        return arg\\n    let myIdentity\\n        :=> \\n            :ref T\\n            param arg\\n                :ref T\\n        := identity\\n    function identity\\n        :< T\\n        param arg\\n            :ref T\\n        :return \\n            :ref T\\n        return arg\\n    let myIdentity\\n        :=> \\n            :ref U\\n            param arg\\n                :ref U\\n        := identity\\n    function identity\\n        :< T\\n        param arg\\n            :ref T\\n        :return \\n            :ref T\\n        return arg",
                    "generated": "\\nfunction identity&lt;T&gt;(arg: T):  T {\\n    return arg;\\n}\\nlet myIdentity(arg: T) =&gt; T =  identity;\\nfunction identity&lt;T&gt;(arg: T):  T {\\n    return arg;\\n}\\nlet myIdentity(arg: U) =&gt; U =  identity;\\nfunction identity&lt;T&gt;(arg: T):  T {\\n    return arg;\\n}\\n"
                },
                {
                    "title": "Call signature",
                    "ittfWrapped": "module \\n    let myIdentity\\n        :{ \\n            :call \\n                :< T\\n                :ref T\\n                param arg\\n                    :ref T\\n        := identity\\n    function identity\\n        :< T\\n        param arg\\n            :ref T\\n        :return \\n            :ref T\\n        return arg\\n    let myIdentity\\n        :ref GenericIdentityFn\\n        := identity\\n    :interface GenericIdentityFn\\n        :< T\\n        :call \\n            :ref T\\n            param arg\\n                :ref T\\n    function identity\\n        :< T\\n        param arg\\n            :ref T\\n        :return \\n            :ref T\\n        return arg\\n    let GenericIdentityFn\\n        :number \\n        := identity",
                    "generated": "\\nlet myIdentity{} =  identity;\\nfunction identity&lt;T&gt;(arg: T):  T {\\n    return arg;\\n}\\nlet myIdentityGenericIdentityFn =  identity;\\ninterface GenericIdentityFn&lt;T&gt; {\\n    (arg: T): T\\n}\\nfunction identity&lt;T&gt;(arg: T):  T {\\n    return arg;\\n}\\nlet GenericIdentityFnnumber =  identity;\\n"
                },
                {
                    "title": "Generic Classes",
                    "ittfWrapped": "module \\n    class GenericNumber\\n        :< T\\n        p zeroValue\\n            :ref T\\n        p add\\n            :=> \\n                :ref T\\n                param x\\n                    :ref T\\n                param y\\n                    :ref T\\n    let myGenericNumber = new GenericNumber()\\n    set myGenericNumber.zeroValue = 0\\n    set myGenericNumber.add =\\n        function \\n            param x\\n            param y\\n            return x + y",
                    "generated": "\\nclass GenericNumber&lt;T&gt; {\\n    zeroValue: T;\\n    add: (x: T, y: T) =&gt; T;\\n}\\nlet myGenericNumber = new GenericNumber();\\nmyGenericNumber.zeroValue = 0;\\nmyGenericNumber.add = function(x, y) {\\n    return x + y;\\n};\\n"
                },
                {
                    "title": "Generic Constraints",
                    "ittfWrapped": "module \\n    function loggingIdentity\\n        :< T\\n        param arg\\n            :ref T\\n        :return \\n            :ref T\\n        _ console.log(arg.length)\\n        return arg\\n    :interface Lengthwise\\n        :p length\\n            :number \\n    function loggingIdentity\\n        :< T\\n            :ref Lengthwise\\n        param arg\\n            :ref T\\n        :return \\n            :ref T\\n        _ console.log(arg.length)\\n        return arg",
                    "generated": "\\nfunction loggingIdentity&lt;T&gt;(arg: T):  T {\\n    console.log(arg.length);\\n    return arg;\\n}\\ninterface Lengthwise {\\n    lengthnumber;\\n}\\nfunction loggingIdentity&lt;T extends Lengthwise&gt;(arg: T):  T {\\n    console.log(arg.length);\\n    return arg;\\n}\\n"
                },
                {
                    "title": "Type Parameters in Generic Constraints",
                    "ittfWrapped": "module \\n    function getProperty\\n        :< T\\n        :< K\\n            :keyof \\n                :ref T\\n        param obj\\n            :ref T\\n        param key\\n            :ref K\\n        return obj[key]\\n    let x\\n        { \\n            @ a 1\\n            @ b 2\\n            @ c 3\\n            @ d 4\\n    _ getProperty(x, \\\"a\\\")\\n    _ getProperty(x, \\\"m\\\")",
                    "generated": "\\nfunction getProperty&lt;T, K keyof T&gt;(obj: T, key: K) {\\n    return obj[key];\\n}\\nlet x = {\\n    a: 1, \\n    b: 2, \\n    c: 3, \\n    d: 4\\n};\\ngetProperty(x, \\\"a\\\");\\ngetProperty(x, \\\"m\\\");\\n"
                },
                {
                    "title": "Class Types in Generics",
                    "ittfWrapped": "module \\n    function create\\n        :< T\\n        param c\\n            :{ \\n                :new \\n                    :ref T\\n        :return \\n            :ref T\\n        return new c()",
                    "generated": "\\nfunction create&lt;T&gt;(c: {}):  T {\\n    return new c();\\n}\\n"
                },
                {
                    "title": "Advanced example",
                    "ittfWrapped": "module \\n    class BeeKeeper\\n        p hasMask\\n            :boolean \\n    class ZooKeeper\\n        p nametag\\n            :string \\n    class Animal\\n        p numLegs\\n            :number \\n    class Bee\\n        super Animal\\n        p keeper\\n            :ref BeeKeeper\\n    class Lion\\n        super Animal\\n        p keeper\\n            :ref ZooKeeper\\n    function createInstance\\n        :< A\\n            :ref Animal\\n        param c\\n            :ctor \\n                :ref A\\n        :return \\n            :ref A\\n        return new c()\\n    var x = createInstance(Lion).keeper.nametag\\n    var y = createInstance(Bee).keeper.hasMask",
                    "generated": "\\nclass BeeKeeper {\\n    hasMask: boolean;\\n}\\nclass ZooKeeper {\\n    nametag: string;\\n}\\nclass Animal {\\n    numLegs: number;\\n}\\nclass Bee extends Animal\\n {\\n    constructor() {super();\\n    }\\n    keeper: BeeKeeper;\\n}\\nclass Lion extends Animal\\n {\\n    constructor() {super();\\n    }\\n    keeper: ZooKeeper;\\n}\\nfunction createInstance&lt;A extends Animal&gt;(c):  A {\\n    return new c();\\n}\\nvar x = createInstance(Lion).keeper.nametag;\\nvar y = createInstance(Bee).keeper.hasMask;\\n"
                }
            ]
        }
    ]
}
