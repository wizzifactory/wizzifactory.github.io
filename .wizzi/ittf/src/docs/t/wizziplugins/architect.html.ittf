$group
    $
        var sect = {
            title: 'Plugin management'
        };

    section(&sect)

		p Wizzi uses a class that implements the
            high-code( wizzi.PluginsManager )
            span Api to resolve and load plugins.
		
		p Wizzi plugins can be nodejs packages installed locally or globally or can be
			\b folders in packages that make a private use of them.
		
		p Plugins used by the
            to-docs( wizzi.WizziFactory )
            span class must be requested at initialization time and cannot be changed. 
			    \b To use a different plugin set a new instance of 
                \b the Wizzi factory class must be created.

		ittf-panel
            title ITTF pseudo-code of the wizzi.WizziFactory.initialize method
            ittf
                ...
                    m initialize
                        { options
                            { repo
                                ...
                            { plugins
                                [ items
                                    string pluginNameOrFile
                                string pluginsBaseFolder
                                    default process.cwd()
                            { test
                                ...
		p The 
            high-code( items )
            span property of the
            high-code( options.plugins )
            span object is an array of:
			ul
				li Package names, when plugins are contained in npm installed nodejs packages
				li Relative paths to plugins index module, when plugins are contained
					\b in private folders.
		span In the case of relative paths the property
            high-code( pluginsBaseFolder )
			span of the
            high-code( options.plugins )
            span object must contains the base folder of the plugin.

		h4 View the code
		p Have a look at how the
            high-code( wizzi.PluginsManager )
            span is implemented in the \b
			a `wizzi` package
				href https://github.com/wizzifactory/wizzi/tree/master/packages/wizzi/dist/lib/services/pluginsManager.js